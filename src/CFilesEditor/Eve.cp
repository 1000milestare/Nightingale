/* Eve.c for Nightingale - routines for supporting copy protection with the Eve3dongle from Rainbow Technologies Inc. *//*									NOTICE * * THIS FILE IS PART OF THE NIGHTINGALEª PROGRAM AND IS CONFIDENTIAL PROP- * ERTY OF ADVANCED MUSIC NOTATION SYSTEMS, INC.  IT IS CONSIDERED A TRADE * SECRET AND IS NOT TO BE DIVULGED OR USED BY PARTIES WHO HAVE NOT RECEIVED * WRITTEN AUTHORIZATION FROM THE OWNER. * Copyright © 1995-97 by Advanced Music Notation Systems, Inc. All Rights Reserved. * */#include "Nightingale_Prefix.pch"#include "Nightingale.appl.h"#include "Eve.h"static Handle pktHandle=NULL;/* ----------------------------------------------------------------- EveGetHandle -- *//* Attempts to allocate a Handle for use by the Eve3 driver: returns TRUE if success,FALSE if failure. */Boolean EveGetHandle(void){	pktHandle = RBEHANDLE();	if (pktHandle!=NULL)		return TRUE;	else		return FALSE;}/* ----------------------------------------------------------------- EveFindFirst -- *//* Attempts to find the first Eve3 with our Developer ID, and returns the non-negative Eve result code. If the Eve Handle doesn't exist, returns -1. */short EveFindFirst(void){	unsigned long 	SN;	unsigned short result;	unsigned long	templong;	unsigned short	devID;		if (pktHandle==NULL)		return -1;	else {		templong = 0x5BDF;								/* Our (Musicware/TAP's) developer ID */		devID = (unsigned short)templong;				result = RBEFINDFIRST(devID, &SN, pktHandle);		return (short)result;	}}	/* ------------------------------------------------------------- CopyProtectionOK -- *//* Check whether the copy-protection status of this copy-protected version ofNightingale is OK. If so, return TRUE. If not, tell the user and return FALSE.The <startup> parameter is intended to tell this function if it's being calledfrom the startup sequence, and therefore--if a problem is found--if it'sreasonable to just quit without giving the user a chance to save their work.It's unused so far.In the worst case, this function could take a couple of seconds, though it shouldusually be much faster. */Boolean CopyProtectionOK(	Boolean /*startup*/)					/* unused */{	short i;	unsigned short result;	char fmtStr[256];		if (pktHandle==NULL)		if (!EveGetHandle()) {			GetIndCString(strBuf, COPYPROTECT_STRS, 1);	/* "Error initializing copy protection: may be out of memory." */			CParamText(strBuf, "", "", "");			PlaceAlert(COPY_PROTECT_ALRT, NULL, 0, 80);			StopInform(COPY_PROTECT_ALRT);			return FALSE;		}			/*	 * Look for an Eve3 dongle that looks like ours. If we don't find it, Rainbow Tech	 * recommends waiting a bit and trying again (apparently it can fail because of	 * noise on the ADB bus). MapInfo tries five times with half-sec. delays; that	 * might not be optimal, especially because they use an earlier-model Eve, but	 * I don't have any more information on what's best.	 */	for (i = 1; i<=5; i++) {		result = EveFindFirst();		if (result==E3_SUCCESS) return TRUE;		SleepTicks(30);	}		/* Couldn't find an Eve3 we like. Tell the user and return FALSE. */		if (result==E3ERR_NOTFOUND)		GetIndCString(fmtStr, COPYPROTECT_STRS, 2);		/* "Can't find a copy-protection key with the correct ID..." */	else		GetIndCString(fmtStr, COPYPROTECT_STRS, 3);		/* "Encountered an unusual problem with the copy-protection key..." */	sprintf(strBuf, fmtStr, result); 	CParamText(strBuf, "", "", "");	PlaceAlert(COPY_PROTECT_ALRT, NULL, 0, 80);	StopInform(COPY_PROTECT_ALRT);	return FALSE;}